#include <vector>

class Solution {
public:
    int countSquares(std::vector<std::vector<int>>& matrix) {
        int height = matrix.size();
        int width = matrix[0].size();

        std::vector<std::vector<int>> partialSum(height, std::vector<int>(width));

        partialSum[0][0] = matrix[0][0];
        for(int i = 1; i<height; i++) {
            partialSum[i][0] = matrix[i][0] + partialSum[i-1][0];
        }
        for(int j = 1; j<width; j++) {
            partialSum[0][j] = matrix[0][j] + partialSum[0][j-1];
        }

        for(int i = 1; i<height; i++) {
            for (int j = 1; j<width; j++) {
                partialSum[i][j] = matrix[i][j] + partialSum[i-1][j] + partialSum[i][j-1] - partialSum[i-1][j-1];
            }
        }

        int result = 0;
        for(int i = 0; i<height; i++) {
            for(int j = 0; j<width; j++) {
                for(int k = 0; (i + k) < height && (j + k) < width; k++) {
                    int sum = partialSum[i+k][j+k] - (j == 0 ? 0: partialSum[i+k][j-1]) - (i == 0 ? 0 : partialSum[i - 1][j+k]) + ((i == 0 || j == 0) ? 0 : partialSum[i-1][j-1]);
                    if(sum == (k+1)*(k+1)) {
                        result++;
                    }
                }
            }
        }

        return result;
        
    }
};